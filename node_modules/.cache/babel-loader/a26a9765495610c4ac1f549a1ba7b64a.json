{"ast":null,"code":"export class OrderLine {\n  constructor(product, quantity) {// no statements required\n\n    this.product = product;\n    this.quantity = quantity;\n  }\n\n  get total() {\n    return this.product.price * this.quantity;\n  }\n\n}\nexport class Order {\n  constructor(initialLines) {\n    this.lines = new Map();\n\n    if (initialLines) {\n      initialLines.forEach(ol => this.lines.set(ol.product.id, ol));\n    }\n  }\n\n  get orderLines() {\n    return [...this.lines.values()];\n  }\n\n  get productCount() {\n    return [...this.lines.values()].reduce((total, ol) => total += ol.quantity, 0);\n  }\n\n  get total() {\n    return [...this.lines.values()].reduce((total, ol) => total += ol.total, 0);\n  }\n\n  addProduct(prod, quantity) {\n    if (this.lines.has(prod.id)) {\n      if (quantity === 0) {\n        this.removeProduct(prod.id);\n      } else {\n        this.lines.get(prod.id).quantity += quantity;\n      }\n    } else {\n      this.lines.set(prod.id, new OrderLine(prod, quantity));\n    }\n  }\n\n  removeProduct(id) {\n    this.lines.delete(id);\n  }\n\n}","map":{"version":3,"sources":["/Users/matthewhill/Downloads/essential-typescript-master/20 - React Web App -2/reactapp/src/data/entities.ts"],"names":["OrderLine","constructor","product","quantity","total","price","Order","initialLines","lines","Map","forEach","ol","set","id","orderLines","values","productCount","reduce","addProduct","prod","has","removeProduct","get","delete"],"mappings":"AAQA,OAAO,MAAMA,SAAN,CAAgB;AACnBC,EAAAA,WAAW,CAAQC,OAAR,EAAiCC,QAAjC,EAAmD,CAC1D;;AAD0D,SAA3CD,OAA2C,GAA3CA,OAA2C;AAAA,SAAlBC,QAAkB,GAAlBA,QAAkB;AAE7D;;AAEQ,MAALC,KAAK,GAAW;AAChB,WAAO,KAAKF,OAAL,CAAaG,KAAb,GAAqB,KAAKF,QAAjC;AACH;;AAPkB;AAUvB,OAAO,MAAMG,KAAN,CAAY;AAGfL,EAAAA,WAAW,CAACM,YAAD,EAA6B;AAAA,SAFhCC,KAEgC,GAFxB,IAAIC,GAAJ,EAEwB;;AACpC,QAAIF,YAAJ,EAAkB;AACdA,MAAAA,YAAY,CAACG,OAAb,CAAqBC,EAAE,IAAI,KAAKH,KAAL,CAAWI,GAAX,CAAeD,EAAE,CAACT,OAAH,CAAWW,EAA1B,EAA8BF,EAA9B,CAA3B;AACH;AACJ;;AAEa,MAAVG,UAAU,GAAgB;AAC1B,WAAO,CAAC,GAAG,KAAKN,KAAL,CAAWO,MAAX,EAAJ,CAAP;AACH;;AAEe,MAAZC,YAAY,GAAW;AACvB,WAAO,CAAC,GAAG,KAAKR,KAAL,CAAWO,MAAX,EAAJ,EACFE,MADE,CACK,CAACb,KAAD,EAAQO,EAAR,KAAeP,KAAK,IAAIO,EAAE,CAACR,QADhC,EAC0C,CAD1C,CAAP;AAEH;;AAEQ,MAALC,KAAK,GAAW;AAChB,WAAO,CAAC,GAAG,KAAKI,KAAL,CAAWO,MAAX,EAAJ,EAAyBE,MAAzB,CAAgC,CAACb,KAAD,EAAQO,EAAR,KAAeP,KAAK,IAAIO,EAAE,CAACP,KAA3D,EAAkE,CAAlE,CAAP;AACH;;AAEMc,EAAAA,UAAU,CAACC,IAAD,EAAgBhB,QAAhB,EAAkC;AAC/C,QAAI,KAAKK,KAAL,CAAWY,GAAX,CAAeD,IAAI,CAACN,EAApB,CAAJ,EAA6B;AACzB,UAAIV,QAAQ,KAAK,CAAjB,EAAoB;AAChB,aAAKkB,aAAL,CAAmBF,IAAI,CAACN,EAAxB;AACH,OAFD,MAEO;AACH,aAAKL,KAAL,CAAWc,GAAX,CAAeH,IAAI,CAACN,EAApB,EAAyBV,QAAzB,IAAqCA,QAArC;AACH;AACJ,KAND,MAMO;AACH,WAAKK,KAAL,CAAWI,GAAX,CAAeO,IAAI,CAACN,EAApB,EAAwB,IAAIb,SAAJ,CAAcmB,IAAd,EAAoBhB,QAApB,CAAxB;AACH;AACJ;;AAEMkB,EAAAA,aAAa,CAACR,EAAD,EAAa;AAC7B,SAAKL,KAAL,CAAWe,MAAX,CAAkBV,EAAlB;AACH;;AApCc","sourcesContent":["export type Product = {\n    id: number,\n    name: string,\n    description: string,\n    category: string,\n    price: number\n};\n\nexport class OrderLine {\n    constructor(public product: Product, public quantity: number) {\n        // no statements required\n    }\n\n    get total(): number {\n        return this.product.price * this.quantity;\n    }\n}\n\nexport class Order {\n    private lines = new Map<number, OrderLine>();\n\n    constructor(initialLines?: OrderLine[]) {\n        if (initialLines) {\n            initialLines.forEach(ol => this.lines.set(ol.product.id, ol));\n        }\n    }\n\n    get orderLines(): OrderLine[] {\n        return [...this.lines.values()];\n    }\n\n    get productCount(): number {\n        return [...this.lines.values()]\n            .reduce((total, ol) => total += ol.quantity, 0);\n    }\n\n    get total(): number {\n        return [...this.lines.values()].reduce((total, ol) => total += ol.total, 0);\n    }\n\n    public addProduct(prod: Product, quantity: number) {\n        if (this.lines.has(prod.id)) {\n            if (quantity === 0) {\n                this.removeProduct(prod.id);\n            } else {\n                this.lines.get(prod.id)!.quantity += quantity;\n            }\n        } else {\n            this.lines.set(prod.id, new OrderLine(prod, quantity));\n        }\n    }\n\n    public removeProduct(id: number) {\n        this.lines.delete(id);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}